
CFLAGS += -g -Wall -O2 -I../leveldb/include -fPIC

%.o: %.c
	$(OCAMLC) -cc g++ $(mapprefix -ccopt, $(CFLAGS)) -ccopt -pthread -c $^

leveldb_stubs.o: leveldb_stubs.cc

LEVELDB_A = $(file ../leveldb/libleveldb.a)

section
    .INCLUDE: ../leveldb/build_config.mk
	    cd(../leveldb/, $(shell sh build_detect_platform))

    CXXFLAGS += -I$(absname ../leveldb) -I$(absname ../leveldb/include) $(PLATFORM_CXXFLAGS) -O2 -DNDEBUG

    CUSTOM_LEVELDB_PIC_OBJS[] =

    foreach(SRC, $(SOURCES)):
	private.DST = custom-leveldb/$(replacesuffixes .cc, .o, $(basename $(SRC)))
	$(DST): ../leveldb/$(SRC)
	    mkdir -p $(dirname $(DST))
	    $(CXX) -c -I$(absname ../leveldb) -I$(absname ../leveldb/include) \
		$(PLATFORM_LDFLAGS) $(CXXFLAGS) $(PLATFORM_SHARED_CFLAGS) $< -o $@
	CUSTOM_LEVELDB_PIC_OBJS[] += $(DST)
	export CUSTOM_LEVELDB_PIC_OBJS

    CUSTOM_LEVELDB_OBJS = $(addprefix ../leveldb/, $(replacesuffixes .cc, .o, $(SOURCES)))

    leveldb.cma leveldb.cmxa dllcamlleveldb.so: leveldb_stubs.o levelDB.cmo levelDB.cmx $(CUSTOM_LEVELDB_PIC_OBJS)
	ocamlmklib \
	    -oc camlleveldb -o leveldb -ltcmalloc -lsnappy \
	    $(CUSTOM_LEVELDB_PIC_OBJS) leveldb_stubs.o levelDB.cmo levelDB.cmx

    foreach(obj, $(CUSTOM_LEVELDB_OBJS)):
	$(obj): $(LEVELDB_A)
	    true

    leveldb.cmxs: libcamlleveldb.a leveldb.cmxa 
	ocamlopt -shared -linkall -I . -o leveldb.cmxs libcamlleveldb.a leveldb.cmxa 

toplevel: leveldb.cma
	ocamlmktop -cc g++ -ccopt -Wno-write-strings \
	    -o toplevel -cclib -L. unix.cma threads.cma leveldb.cma -thread

.DEFAULT: leveldb.cma leveldb.cmxa leveldb.cmxs

.PHONY: clean

clean:
	rm -f $(filter-proper-targets $(ls R, .)) *.s *.annot *.so *.a
